# Build stage
FROM node:18-alpine AS builder

# Install Python and build tools for native modules (Node-Gyp)
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm ci --force # Keep --force for now, or remove if you resolve conflicts cleanly

# Copy all files
COPY . .

# TypeScript compilation (if not already handled by server.js)
RUN if [ ! -f "server.js" ] && [ -f "node_modules/.bin/tsc" ]; then \
        echo "Compiling TypeScript..." && \
        ./node_modules/.bin/tsc; \
    else \
        echo "Using existing server.js or no TypeScript compiler found"; \
    fi

# Production stage
FROM node:18-alpine AS runner

WORKDIR /app

# Set to production environment
ENV NODE_ENV production

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nodeapp

# Copy package files
COPY --from=builder /app/package.json /app/package-lock.json* ./

# Install production dependencies only
RUN npm ci --production --force && npm cache clean --force

# Copy server.js (main entry point)
COPY --from=builder /app/server.js ./server.js

# Copy compiled JavaScript files and directories if they exist
# Use separate RUN commands with shell conditionals instead of inline conditionals in COPY
COPY --from=builder /app/*.js ./

# Create a script to copy directories if they exist
RUN mkdir -p controllers middleware routes utils config

# Copy necessary directories with proper error handling
COPY --from=builder /app/controllers/. ./controllers/ 2>/dev/null || true
COPY --from=builder /app/middleware/. ./middleware/ 2>/dev/null || true
COPY --from=builder /app/routes/. ./routes/ 2>/dev/null || true
COPY --from=builder /app/utils/. ./utils/ 2>/dev/null || true
COPY --from=builder /app/config/. ./config/ 2>/dev/null || true

# Set proper permissions
RUN chown -R nodeapp:nodejs /app

# Switch to non-root user
USER nodeapp

# Expose the port the app will run on
EXPOSE 3001

# Environment variables will be passed at runtime
ENV PORT 3001
ENV HOST "0.0.0.0"

# Start the application with server.js as the entry point
CMD ["node", "server.js"]