pipeline {
    agent any

    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        JAVA_HOME = "${tool 'jdk'}"
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        SCANNER_HOME = tool 'sonar-scanner'

        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Mr-Surendar/DevOps-Dashboard.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=frontend \
                            -Dsonar.projectKey=frontend \
                            -Dsonar.java.binaries=.
                        """
                    }
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                script {
                 dir('frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
    }
}


        stage('Trivy File Scan') {
            steps {
                dir('frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }


       stage('Docker Image Build') {
    steps {
        dir('frontend') {
            sh '''
                docker system prune -f
                docker container prune -f
                docker build -t ${AWS_ECR_REPO_NAME} -f Dockerfile.frontend "."
            '''
        }
    }
}

        stage('Push Image to ECR') {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                        docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                        docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

       stage('Update Deployment File and Push') {
    environment {
        GIT_REPO_NAME = 'DevOps-Dashboard'
        GIT_USER_NAME = 'Mr-Surendar'
    }
    steps {
        dir('Kubernetes-Manifests-file/Frontend') {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "preepsurendar874@gmail.com"
                    git config user.name "Mr-Surendar"

                    # Correct ECR repo (matches your actual AWS ECR)
                    ECR_FULL_REPO="633087886901.dkr.ecr.us-east-1.amazonaws.com/frontend"

                    # Extract old image tag
                    oldTag=$(grep "image: ${ECR_FULL_REPO}:" deployment.yaml | sed -E 's/.*:([0-9]+)$/\\1/')

                    newTag="${BUILD_NUMBER}"

                    if [ -z "$oldTag" ]; then
                        echo "ERROR: Could not find the current image tag (like ':3') after '${ECR_FULL_REPO}:' in deployment.yaml."
                        echo "Please ensure the image line in deployment.yaml is correct: 'image: ${ECR_FULL_REPO}:[number]'"
                        exit 1
                    fi

                    echo "Detected old image tag: ${oldTag}"
                    echo "New image tag will be: ${newTag}"

                    # Replace old image tag with new one
                    sed -i "s|${ECR_FULL_REPO}:${oldTag}|${ECR_FULL_REPO}:${newTag}|" deployment.yaml

                    if git diff --exit-code deployment.yaml; then
                        echo "deployment.yaml was NOT modified. The tag might already be ${newTag}."
                    else
                        echo "deployment.yaml updated. Committing and pushing..."
                        git add deployment.yaml
                        git commit -m "Update frontend image to version ${newTag}" || true
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    fi
                '''
            }
        }
    }
}
