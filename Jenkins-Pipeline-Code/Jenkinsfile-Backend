pipeline {
    agent any

    tools {
        jdk 'jdk'
        nodejs 'nodejs'
        dockerTool 'docker' // Optional if docker is already on the agent
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from GitHub') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Mr-Surendar/DevOps-Dashboard.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('server') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=backend \
                            -Dsonar.projectKey=backend'''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('server') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('server') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('server') {
                    sh '''
                        docker system prune -f
                        docker container prune -f
                        docker build -t "${AWS_ECR_REPO_NAME}" .
                    '''
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                        docker tag "${AWS_ECR_REPO_NAME}" "${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                        docker push "${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                    '''
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image "${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}" > trivyimage.txt'
            }
        }

        stage('Update Kubernetes Deployment') {
            environment {
                GIT_REPO_NAME = "DevOps-Dashboard"
                GIT_USER_NAME = "Mr-Surendar"
            }
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "preepsurendar874@gmail.com"
                            git config user.name "Mr-Surendar"

                            imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml | head -n 1)
                            sed -i "s|${AWS_ECR_REPO_NAME}:${imageTag}|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml

                            git add deployment.yaml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
